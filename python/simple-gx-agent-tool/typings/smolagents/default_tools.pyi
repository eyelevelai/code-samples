"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Any
from .tools import PipelineTool, Tool

@dataclass
class PreTool:
    name: str
    inputs: dict[str, str]
    output_type: type
    task: str
    description: str
    repo_id: str
    ...


class PythonInterpreterTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, *args, authorized_imports=..., **kwargs) -> None:
        ...
    
    def forward(self, code: str) -> str:
        ...
    


class FinalAnswerTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def forward(self, answer: Any) -> Any:
        ...
    


class UserInputTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def forward(self, question): # -> str:
        ...
    


class DuckDuckGoSearchTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, max_results=..., **kwargs) -> None:
        ...
    
    def forward(self, query: str) -> str:
        ...
    


class GoogleSearchTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, provider: str = ...) -> None:
        ...
    
    def forward(self, query: str, filter_year: int | None = ...) -> str:
        ...
    


class ApiWebSearchTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, endpoint: str = ..., api_key: str = ..., api_key_name: str = ..., headers: dict = ..., params: dict = ...) -> None:
        ...
    
    def forward(self, query: str) -> str:
        ...
    
    def extract_results(self, data: dict) -> list:
        ...
    
    def format_markdown(self, results: list) -> str:
        ...
    


class WebSearchTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, max_results: int = ..., engine: str = ...) -> None:
        ...
    
    def forward(self, query: str) -> str:
        ...
    
    def search(self, query: str) -> list:
        ...
    
    def parse_results(self, results: list) -> str:
        ...
    
    def search_duckduckgo(self, query: str) -> list:
        ...
    
    def search_bing(self, query: str) -> list:
        ...
    


class VisitWebpageTool(Tool):
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, max_output_length: int = ...) -> None:
        ...
    
    def forward(self, url: str) -> str:
        ...
    


class WikipediaSearchTool(Tool):
    """
    WikipediaSearchTool searches Wikipedia and returns a summary or full text of the given topic, along with the page URL.

    Attributes:
        user_agent (str): A custom user-agent string to identify the project. This is required as per Wikipedia API policies, read more here: http://github.com/martin-majlis/Wikipedia-API/blob/master/README.rst
        language (str): The language in which to retrieve Wikipedia articles.
                http://meta.wikimedia.org/wiki/List_of_Wikipedias
        content_type (str): Defines the content to fetch. Can be "summary" for a short summary or "text" for the full article.
        extract_format (str): Defines the output format. Can be `"WIKI"` or `"HTML"`.

    Example:
        >>> from smolagents import CodeAgent, InferenceClientModel, WikipediaSearchTool
        >>> agent = CodeAgent(
        >>>     tools=[
        >>>            WikipediaSearchTool(
        >>>                user_agent="MyResearchBot (myemail@example.com)",
        >>>                language="en",
        >>>                content_type="summary",  # or "text"
        >>>                extract_format="WIKI",
        >>>            )
        >>>        ],
        >>>     model=InferenceClientModel(),
        >>> )
        >>> agent.run("Python_(programming_language)")
    """
    name = ...
    description = ...
    inputs = ...
    output_type = ...
    def __init__(self, user_agent: str = ..., language: str = ..., content_type: str = ..., extract_format: str = ...) -> None:
        ...
    
    def forward(self, query: str) -> str:
        ...
    


class SpeechToTextTool(PipelineTool):
    default_checkpoint = ...
    description = ...
    name = ...
    inputs = ...
    output_type = ...
    def __new__(cls, *args, **kwargs): # -> Self:
        ...
    
    def encode(self, audio):
        ...
    
    def forward(self, inputs):
        ...
    
    def decode(self, outputs):
        ...
    


TOOL_MAPPING = ...
__all__ = ["PythonInterpreterTool", "FinalAnswerTool", "UserInputTool", "WebSearchTool", "DuckDuckGoSearchTool", "GoogleSearchTool", "VisitWebpageTool", "WikipediaSearchTool", "SpeechToTextTool"]

"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Optional, Tuple
from .remote_executors import RemotePythonExecutor

class PyodideDenoExecutor(RemotePythonExecutor):
    """
    Executes Python code securely in a sandboxed JavaScript environment using Pyodide and Deno.

    This executor leverages Deno's secure runtime and Pyodide to run Python code in a sandboxed
    environment within the browser's JavaScript engine. It provides strong isolation guarantees
    while still allowing Python code execution.

    Args:
        additional_imports (`list[str]`): Additional Python packages to install in the Pyodide environment.
        logger (`Logger`): Logger to use for output and errors.
        deno_path (`str`, optional): Path to the Deno executable. If not provided, will use "deno" from PATH.
        deno_permissions (`list[str]`, optional): List of permissions to grant to the Deno runtime.
            Default is minimal permissions needed for execution.
        pyodide_packages (`list[str]`, optional): Additional Pyodide packages to load.
        timeout (`int`, optional): Timeout in seconds for code execution. Default is 60 seconds.
    """
    def __init__(self, additional_imports: List[str], logger, deno_path: str = ..., deno_permissions: Optional[List[str]] = ..., pyodide_packages: Optional[List[str]] = ..., timeout: int = ...) -> None:
        ...
    
    def run_code_raise_errors(self, code: str, return_final_answer: bool = ...) -> Tuple[Any, str]:
        """
        Execute Python code in the Pyodide environment and return the result.

        Args:
            code (str): Python code to execute.
            return_final_answer (bool): Whether to extract and return the final answer.

        Returns:
            Tuple[Any, str]: A tuple containing the result and execution logs.
        """
        ...
    
    def install_packages(self, additional_imports: List[str]) -> List[str]:
        """
        Install additional Python packages in the Pyodide environment.

        Args:
            additional_imports (List[str]): List of package names to install.

        Returns:
            List[str]: List of installed packages.
        """
        ...
    
    def cleanup(self): # -> None:
        """Clean up resources used by the executor."""
        ...
    
    def delete(self): # -> None:
        """Ensure cleanup on deletion."""
        ...
    


JS_CODE = ...

"""
This type stub file was generated by pyright.
"""

import PIL.Image
from dataclasses import dataclass
from typing import Any, TYPE_CHECKING
from smolagents.models import ChatMessage
from smolagents.monitoring import AgentLogger, Timing, TokenUsage
from smolagents.utils import AgentError

if TYPE_CHECKING:
    ...
logger = ...
@dataclass
class ToolCall:
    name: str
    arguments: Any
    id: str
    def dict(self): # -> dict[str, Any]:
        ...
    


@dataclass
class MemoryStep:
    def dict(self): # -> dict[str, Any]:
        ...
    
    def to_messages(self, summary_mode: bool = ...) -> list[ChatMessage]:
        ...
    


@dataclass
class ActionStep(MemoryStep):
    step_number: int
    timing: Timing
    model_input_messages: list[ChatMessage] | None = ...
    tool_calls: list[ToolCall] | None = ...
    error: AgentError | None = ...
    model_output_message: ChatMessage | None = ...
    model_output: str | None = ...
    code_action: str | None = ...
    observations: str | None = ...
    observations_images: list[PIL.Image.Image] | None = ...
    action_output: Any = ...
    token_usage: TokenUsage | None = ...
    is_final_answer: bool = ...
    def dict(self): # -> dict[str, Any]:
        ...
    
    def to_messages(self, summary_mode: bool = ...) -> list[ChatMessage]:
        ...
    


@dataclass
class PlanningStep(MemoryStep):
    model_input_messages: list[ChatMessage]
    model_output_message: ChatMessage
    plan: str
    timing: Timing
    token_usage: TokenUsage | None = ...
    def to_messages(self, summary_mode: bool = ...) -> list[ChatMessage]:
        ...
    


@dataclass
class TaskStep(MemoryStep):
    task: str
    task_images: list[PIL.Image.Image] | None = ...
    def to_messages(self, summary_mode: bool = ...) -> list[ChatMessage]:
        ...
    


@dataclass
class SystemPromptStep(MemoryStep):
    system_prompt: str
    def to_messages(self, summary_mode: bool = ...) -> list[ChatMessage]:
        ...
    


@dataclass
class FinalAnswerStep(MemoryStep):
    output: Any
    ...


class AgentMemory:
    """Memory for the agent, containing the system prompt and all steps taken by the agent.

    This class is used to store the agent's steps, including tasks, actions, and planning steps.
    It allows for resetting the memory, retrieving succinct or full step information, and replaying the agent's steps.

    Args:
        system_prompt (`str`): System prompt for the agent, which sets the context and instructions for the agent's behavior.

    **Attributes**:
        - **system_prompt** (`SystemPromptStep`) -- System prompt step for the agent.
        - **steps** (`list[TaskStep | ActionStep | PlanningStep]`) -- List of steps taken by the agent, which can include tasks, actions, and planning steps.
    """
    def __init__(self, system_prompt: str) -> None:
        ...
    
    def reset(self): # -> None:
        """Reset the agent's memory, clearing all steps and keeping the system prompt."""
        ...
    
    def get_succinct_steps(self) -> list[dict]:
        """Return a succinct representation of the agent's steps, excluding model input messages."""
        ...
    
    def get_full_steps(self) -> list[dict]:
        """Return a full representation of the agent's steps, including model input messages."""
        ...
    
    def replay(self, logger: AgentLogger, detailed: bool = ...): # -> None:
        """Prints a pretty replay of the agent's steps.

        Args:
            logger (`AgentLogger`): The logger to print replay logs to.
            detailed (`bool`, default `False`): If True, also displays the memory at each step. Defaults to False.
                Careful: will increase log length exponentially. Use only for debugging.
        """
        ...
    
    def return_full_code(self) -> str:
        """Returns all code actions from the agent's steps, concatenated as a single script."""
        ...
    


__all__ = ["AgentMemory"]

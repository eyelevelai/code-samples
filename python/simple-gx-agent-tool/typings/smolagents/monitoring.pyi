"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from enum import IntEnum
from rich.console import Console

__all__ = ["AgentLogger", "LogLevel", "Monitor", "TokenUsage", "Timing"]
@dataclass
class TokenUsage:
    """
    Contains the token usage information for a given step or run.
    """
    input_tokens: int
    output_tokens: int
    total_tokens: int = ...
    def __post_init__(self): # -> None:
        ...
    
    def dict(self): # -> dict[str, int]:
        ...
    


@dataclass
class Timing:
    """
    Contains the timing information for a given step or run.
    """
    start_time: float
    end_time: float | None = ...
    @property
    def duration(self): # -> float | None:
        ...
    
    def dict(self): # -> dict[str, Any]:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Monitor:
    def __init__(self, tracked_model, logger) -> None:
        ...
    
    def get_total_token_counts(self) -> TokenUsage:
        ...
    
    def reset(self): # -> None:
        ...
    
    def update_metrics(self, step_log): # -> None:
        """Update the metrics of the monitor.

        Args:
            step_log ([`MemoryStep`]): Step log to update the monitor with.
        """
        ...
    


class LogLevel(IntEnum):
    OFF = ...
    ERROR = ...
    INFO = ...
    DEBUG = ...


YELLOW_HEX = ...
class AgentLogger:
    def __init__(self, level: LogLevel = ..., console: Console | None = ...) -> None:
        ...
    
    def log(self, *args, level: int | str | LogLevel = ..., **kwargs) -> None:
        """Logs a message to the console.

        Args:
            level (LogLevel, optional): Defaults to LogLevel.INFO.
        """
        ...
    
    def log_error(self, error_message: str) -> None:
        ...
    
    def log_markdown(self, content: str, title: str | None = ..., level=..., style=...) -> None:
        ...
    
    def log_code(self, title: str, content: str, level: int = ...) -> None:
        ...
    
    def log_rule(self, title: str, level: int = ...) -> None:
        ...
    
    def log_task(self, content: str, subtitle: str, title: str | None = ..., level: LogLevel = ...) -> None:
        ...
    
    def log_messages(self, messages: list[dict], level: LogLevel = ...) -> None:
        ...
    
    def visualize_agent_tree(self, agent): # -> None:
        ...
    



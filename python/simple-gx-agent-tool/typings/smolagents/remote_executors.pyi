"""
This type stub file was generated by pyright.
"""

from typing import Any
from .local_python_executor import PythonExecutor
from .tools import Tool

class RemotePythonExecutor(PythonExecutor):
    def __init__(self, additional_imports: list[str], logger) -> None:
        ...
    
    def run_code_raise_errors(self, code: str, return_final_answer: bool = ...) -> tuple[Any, str]:
        ...
    
    def send_tools(self, tools: dict[str, Tool]): # -> None:
        ...
    
    def send_variables(self, variables: dict): # -> None:
        """
        Send variables to the kernel namespace using pickle.
        """
        ...
    
    def __call__(self, code_action: str) -> tuple[Any, str, bool]:
        """Check if code is a final answer and run it accordingly"""
        ...
    
    def install_packages(self, additional_imports: list[str]): # -> list[str]:
        ...
    


class E2BExecutor(RemotePythonExecutor):
    """
    Executes Python code using E2B.

    Args:
        additional_imports (`list[str]`): Additional imports to install.
        logger (`Logger`): Logger to use.
        **kwargs: Additional arguments to pass to the E2B Sandbox.
    """
    def __init__(self, additional_imports: list[str], logger, **kwargs) -> None:
        ...
    
    def run_code_raise_errors(self, code: str, return_final_answer: bool = ...) -> tuple[Any, str]:
        ...
    
    def cleanup(self): # -> None:
        """Clean up the E2B sandbox and resources."""
        ...
    


class DockerExecutor(RemotePythonExecutor):
    """
    Executes Python code using Jupyter Kernel Gateway in a Docker container.
    """
    def __init__(self, additional_imports: list[str], logger, host: str = ..., port: int = ..., image_name: str = ..., build_new_image: bool = ..., container_run_kwargs: dict[str, Any] | None = ...) -> None:
        """
        Initialize the Docker-based Jupyter Kernel Gateway executor.

        Args:
            additional_imports: Additional imports to install.
            logger: Logger to use.
            host: Host to bind to.
            port: Port to bind to.
            image_name: Name of the Docker image to use. If the image doesn't exist, it will be built.
            build_new_image: If True, the image will be rebuilt even if it already exists.
            container_run_kwargs: Additional keyword arguments to pass to the Docker container run command.
        """
        ...
    
    def run_code_raise_errors(self, code_action: str, return_final_answer: bool = ...) -> tuple[Any, str]:
        """
        Execute code and return result based on whether it's a final answer.
        """
        ...
    
    def cleanup(self): # -> None:
        """Clean up the Docker container and resources."""
        ...
    
    def delete(self): # -> None:
        """Ensure cleanup on deletion."""
        ...
    


__all__ = ["E2BExecutor", "DockerExecutor"]
